package marupadi.appraisal.management.system;

import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.Scanner;

public class ReviewSystem {
	
	//ATRIBUTES
	private boolean enableGoalWeightage;
	private boolean enableAssignmentWeightage;
	private boolean enableProjectWeightage;
	private int noOfModulesEnabled=3;
	
	//GETTER AND SETTER

	public boolean isEnableGoalWeightage() {
		return enableGoalWeightage;
	}


	public void setEnableGoalWeightage(boolean enableGoalWeightage) {
		this.enableGoalWeightage = enableGoalWeightage;
	}


	public boolean isEnableAssignmentWeightage() {
		return enableAssignmentWeightage;
	}


	public void setEnableAssignmentWeightage(boolean enableAssignmentWeightage) {
		this.enableAssignmentWeightage = enableAssignmentWeightage;
	}


	public boolean isEnableProjectWeightage() {
		return enableProjectWeightage;
	}


	public void setEnableProjectWeightage(boolean enableProjectWeightage) {
		this.enableProjectWeightage = enableProjectWeightage;
	}


	
	//Process the Submitted Module Rating - Average and Score Calculations
	public Double goalAverageCalc(LinkedHashMap<Goal,Integer> GoalList)
	{
		Double goalAverage = 0.0,SumOfproduct=0.0,sumOfGoalWeightage=0.0,sumOfRating=0.0;
		for(Goal thisGoal:GoalList.keySet())
		{
			SumOfproduct=SumOfproduct+(thisGoal.getGoalWeightage()*GoalList.get(thisGoal));
			sumOfGoalWeightage=sumOfGoalWeightage+thisGoal.getGoalWeightage();
			sumOfRating=sumOfRating+GoalList.get(thisGoal);
		}
		if(isEnableGoalWeightage())
		{
			goalAverage=SumOfproduct/sumOfGoalWeightage;
		}
		else
		{
			goalAverage=sumOfRating/GoalList.size();
		}
		
		return goalAverage;
	}



	public Double assignmentAverageCalc(LinkedHashMap<Assignment,Integer> AssignmentList)
	{
		Double assignmentAverage = 0.0,SumOfproduct=0.0,sumOfAssignmentWeightage=0.0,sumOfRating=0.0;
		for(Assignment thisAssignment:AssignmentList.keySet())
		{
			SumOfproduct=SumOfproduct+(thisAssignment.getAssignmentWeightage()*AssignmentList.get(thisAssignment));
			sumOfAssignmentWeightage=sumOfAssignmentWeightage+thisAssignment.getAssignmentWeightage();
			sumOfRating=sumOfRating+AssignmentList.get(thisAssignment);
		}
		if(isEnableAssignmentWeightage())
		{
			assignmentAverage=SumOfproduct/sumOfAssignmentWeightage;
		}
		else
		{
			assignmentAverage=sumOfRating/AssignmentList.size();
		}
		
		return assignmentAverage;
		
	}
	

	public Double projectAverageCalc(LinkedHashMap<Project,Integer> ProjectList)
	{
		Double projectAverage = 0.0,SumOfproduct=0.0,sumOfGoalWeightage=0.0,sumOfRating=0.0;
		for(Project thisProject:ProjectList.keySet())
		{
			SumOfproduct=SumOfproduct+(thisProject.getProjectWeightage()*ProjectList.get(thisProject));
			sumOfGoalWeightage=sumOfGoalWeightage+thisProject.getProjectWeightage();
			sumOfRating=sumOfRating+ProjectList.get(thisProject);
		}
		if(isEnableProjectWeightage())
		{
			projectAverage=SumOfproduct/sumOfGoalWeightage;
		}
		else
		{
			projectAverage=sumOfRating/ProjectList.size();
		}
		
		return projectAverage;
		
		
	}

	public Double ModuleActualScoreCalc(Double ModuleTotalAverage, Integer TotalNoOfModules) {
		
		Double ModuleActualScore=0.0;
		
		ModuleActualScore=ModuleTotalAverage/TotalNoOfModules;
		
		return ModuleActualScore;
	}
	
	
	//Method- To calculate final score
	public String finalRating(Double GoalScore,Double AssignmentScore, Double ProjectScore)
	{
		Double finalScore=GoalScore+AssignmentScore+ProjectScore;
		System.out.println("Final Score: "+finalScore);
		
		if(finalScore>4 && finalScore<=5)
			return "OutStanding";
		
		else if(finalScore>3 && finalScore<=4)
			return "Excellent";
		
		else if(finalScore>2 && finalScore<=3)
			return "Satisfactory";
		
		else if(finalScore>1 && finalScore<=2)
			return "Needs Improvement";
		
		else if(finalScore>0 && finalScore<=1)
			return "Unsatisfactory";
		else
		return null;
		
	
	}





	public void goalWeightageSetting() {
		Scanner scan=new Scanner(System.in);
		String weightageChoice=null;
		do {
		System.out.println("Enable Goal Weightage: 'Y' or 'N'");
		weightageChoice=scan.next();
		}while(!weightageChoice.equalsIgnoreCase("Y") && !weightageChoice.equalsIgnoreCase("N"));
		
		if(weightageChoice.equalsIgnoreCase("Y") )
			setEnableGoalWeightage(true);
		else
			setEnableGoalWeightage(false);

	}


	public void assignmentWeightageSetting() {
		Scanner scan=new Scanner(System.in);
		String weightageChoice=null;
		do {
		System.out.println("Enable Assignment Weightage: 'Y' or 'N'");
		weightageChoice=scan.next();
		}while(!weightageChoice.equalsIgnoreCase("Y") && !weightageChoice.equalsIgnoreCase("N"));
		
		if(weightageChoice.equalsIgnoreCase("Y") )
			setEnableAssignmentWeightage(true);
		else
			setEnableAssignmentWeightage(false);
		
	}


	public void projectWeightageSetting() {
		Scanner scan=new Scanner(System.in);
		String weightageChoice=null;
		do {
		System.out.println("Enable Project Weightage: 'Y' or 'N'");
		weightageChoice=scan.next();
		}while(!weightageChoice.equalsIgnoreCase("Y") && !weightageChoice.equalsIgnoreCase("N"));
		
		if(weightageChoice.equalsIgnoreCase("Y") )
			setEnableProjectWeightage(true);
		else
			setEnableProjectWeightage(false);
		
		
	}


	public int getNoOfModulesEnabled() {
		return noOfModulesEnabled;
	}


	public void setNoOfModulesEnabled(int noOfModulesEnabled) {
		this.noOfModulesEnabled = noOfModulesEnabled;
	}
	

	



}
