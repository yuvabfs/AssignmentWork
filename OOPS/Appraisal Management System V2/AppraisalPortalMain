package marupadi.appraisal.management.system;
import java.util.*;


public class AppraisalPortalMain {

	public static void main(String[] args) 
	
	{
	
//Initialization- APPRAISAL PORTAL
		Scanner scan=new Scanner(System.in);
		System.out.println("APPRAISAL PORTAL");
		boolean isValid =false;
		EmployeesDB empDB=new EmployeesDB();
		Employee employee=new Employee(null,null,null,null,null,null,null);
	
//LOGIN- Verifying if valid employee ID is entered and fetching the respective detail EmployeesDB
		do {
		
		System.out.print("Enter Employee ID: ");
		String empID=scan.nextLine();
		
		for (Employee fetchDB : empDB.getEmployeesList())
		{
			if(fetchDB.getEmployeeID().contains(empID))
			{
				employee=fetchDB;
				System.out.println(employee.getGoalList().size());
				isValid = true;
			}
		}
	//To handle invalid employeeID
		if(!isValid)System.out.println("Employee ID does not match!");
		}while(!isValid);


		System.out.println("Hello "+employee.getEmployeeName()+"! Welcome to Appraisal Portal");
		
		System.out.println("Please Select\n1.Self Review\n2.Peer Review\n");
		
		int reviewChoice=0;
		do {
		System.out.println("Type[1 or 2]");
		reviewChoice=scan.nextInt();
		}while(reviewChoice!=1 && reviewChoice!=2);
	
//SELF REVIEW OPERATION
		if(reviewChoice==1)
		{
			ReviewSystem review=new ReviewSystem();	
			
			System.out.println("~~~~Please Rate your Goals~~~~");
			employee.reviewGoal();				
			
			review.goalWeightageSetting();
			System.out.println("Goal Weightage Status: "+review.isEnableGoalWeightage());
			
			System.out.println("Module Average- Goal");
			Double goalAverage=review.goalAverageCalc(employee.getGoalList());
			
			System.out.println(goalAverage);
			Double actualGoalScore=review.ModuleActualScoreCalc(goalAverage,3);
			
			
			
			
			System.out.println("~~~~Please Rate your Assignments~~~~");
			employee.reviewAssignment();
			
			review.assignmentWeightageSetting();
			System.out.println("Assignment Weightage Status: "+review.isEnableAssignmentWeightage());
			
			System.out.println("Module Average- Assignments");
			Double assignmentAverage=review.assignmentAverageCalc(employee.getAssignmentList());
			
			System.out.println(assignmentAverage);
			Double actualAssignmentScore=review.ModuleActualScoreCalc(assignmentAverage,3);
			
			
			
			
			System.out.println("~~~~Please Rate your Projects~~~~");
			employee.reviewProject();
			
			review.projectWeightageSetting();
			System.out.println("Project Weightage Status: "+review.isEnableProjectWeightage());
			
			System.out.println("Module Average- Projects");
			Double projectAverage=review.projectAverageCalc(employee.getProjectList());
			
			System.out.println(projectAverage);
			Double actualProjectScore=review.ModuleActualScoreCalc(projectAverage,3);
			
			

			System.out.println("Goal Module Actual Score ");
			System.out.println(actualGoalScore);
			System.out.println("Assignment Module Actual Score ");
			System.out.println(actualAssignmentScore);
			System.out.println("Project Module Actual Score ");
			System.out.println(actualProjectScore);
			
			
			System.out.println("Comment based on your Final Score");
			String comment=review.finalRating(actualGoalScore,actualAssignmentScore,actualProjectScore);
			System.out.println(comment);
			
			
		}
		
		else
		{
			ReviewSystem review=new ReviewSystem();	
			
			if(!employee.showReportees(employee.getEmployeeGrade()).isEmpty())
			{
				boolean isReportee=false;
				EmployeesDB employeeDB=new EmployeesDB();
				Employee myReportee=new Employee(null,null,null,null,null,null,null);
			
		//Verifying if valid Reportee ID is entered and fetching the respective detail from EmployeesDB
				do {
				
					System.out.println("Enter the Employee ID of the Reportee to Review");
					String reporteeID=scan.next();
				
				for (Employee fetchDB : employeeDB.getEmployeesList())
				{
					if(fetchDB.getEmployeeID().contains(reporteeID)&&employee.showReportees(employee.getEmployeeGrade()).contains(reporteeID))
					{
						myReportee=fetchDB;
						isReportee = true;
					}
				}
			//To handle invalid employeeID
				if(!isReportee)System.out.println("Reportee ID not found, Retry!");
				}while(!isReportee);
				
				
				System.out.println("~~~~Please Rate your Reportee's Goals~~~~");
				myReportee.reviewGoal();			
				
				review.projectWeightageSetting();
				System.out.println("Project Weightage Status: "+review.isEnableProjectWeightage());
				
				System.out.println("Goal Module Average");
				Double goalAverage=review.goalAverageCalc(myReportee.getGoalList());
				System.out.println(goalAverage);
				
				Double actualGoalScore=review.ModuleActualScoreCalc(goalAverage,review.getNoOfModulesEnabled());
				
				
				System.out.println("~~~~Please Rate your Reportee's Assignments~~~~");
				myReportee.reviewAssignment();
				
				review.projectWeightageSetting();
				System.out.println("Project Weightage Status: "+review.isEnableProjectWeightage());
				
				System.out.println("Assignment Module Average");
				Double assignmentAverage=review.assignmentAverageCalc(myReportee.getAssignmentList());
				System.out.println(assignmentAverage);
				
				Double actualAssignmentScore=review.ModuleActualScoreCalc(assignmentAverage,review.getNoOfModulesEnabled());
				
				System.out.println("~~~~Please Rate your Reportee's Projects~~~~");
				myReportee.reviewProject();
				
				review.projectWeightageSetting();
				System.out.println("Project Weightage Status: "+review.isEnableProjectWeightage());
				
				System.out.println("Project Module Average");
				Double projectAverage=review.projectAverageCalc(myReportee.getProjectList());
				System.out.println(projectAverage);
				
				Double actualProjectScore=review.ModuleActualScoreCalc(projectAverage,review.getNoOfModulesEnabled());
				
				

				System.out.println("Goal Module Actual Score ");
				System.out.println(actualGoalScore);
				System.out.println("Assignment Module Actual Score ");
				System.out.println(actualAssignmentScore);
				System.out.println("Project Module Actual Score ");
				System.out.println(actualProjectScore);
				
				
				System.out.println("Final Score Calculation");
				String comment=review.finalRating(actualGoalScore,actualAssignmentScore,actualProjectScore);
				System.out.println("You have rewarded: "+comment);
				
				
				
			}
			else
			{
				System.out.println("You have no Reportees at present");
			}
		}

	}

}
